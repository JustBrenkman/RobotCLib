#pragma config(Hubs,  S1, MatrxRbtcs, none,     none,     none)
#pragma config(Sensor, S2,     gyroSensor,     sensorI2CHiTechnicGyro)
#pragma config(Sensor, S3,     sensorIR,       sensorI2CCustom)
#pragma config(Motor,  mtr_Matrix_S1_1, motorBack,     tmotorMatrix, PIDControl)
#pragma config(Motor,  mtr_Matrix_S1_2, motorLeft,     tmotorMatrix, PIDControl)
#pragma config(Motor,  mtr_Matrix_S1_3, motorRight,    tmotorMatrix, PIDControl)
#pragma config(Motor,  mtr_Matrix_S1_4, motorFront,    tmotorMatrix, PIDControl)
#pragma config(Servo,  srvo_Matrix_S1_1, servo1,               tServoNone)
#pragma config(Servo,  srvo_Matrix_S1_2, servo2,               tServoNone)
#pragma config(Servo,  srvo_Matrix_S1_3, servo3,               tServoNone)
#pragma config(Servo,  srvo_Matrix_S1_4, servo4,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "irSeeker_lib.h"
#include "HolonomicDrive.c"
#include "SmoothMoves.c"
//#include "JoystickDriver.c"
#include "Gyro.c"
//#include "BlueToothCom/BTRawComm.h"

task main()
{

ubyte trasmitBuffer[1];
	//waitForStart();

	IRSeekerInfo irSeeker;

	ubyte transmitBuffer[1];

	initializeHolonimicDrive(motorFront, motorRight, motorBack, motorLeft);
	initialieIRSeeker(irSeeker, sensorIR);
	addGyroControl(gyroSensor);

	eraseDisplay();

	while(true) {
		//getJoystickSettings(joystick);
		eraseDisplay();

		nxtDisplayTextLine(1,"%4f", irSeeker.dir_ac);

		//sendMessage(irSeeker.dir_ac + 100);
		transmitBuffer = irSeeker.dir_ac;
		nxtWriteRawBluetooth(trasmitBuffer, 1);

		sendRobot(joystick);
		rotate(-joystick.joy1_x2);

		updateHolonomicDrive();

		updateIRSeeker(irSeeker);

		if (joy1Btn(2) == 1) {
			resetGyro(gyro);
		}
	}
}
